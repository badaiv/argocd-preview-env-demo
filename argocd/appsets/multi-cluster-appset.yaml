# argocd/multi-cluster-appset.yaml
# Example ApplicationSet for deploying the *same* application to multiple clusters.
# This uses the 'list' generator. Clusters must be predefined in ArgoCD secrets.
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  # Name of the ApplicationSet
  name: multi-cluster-demo-app
  # Deploy this ApplicationSet into the ArgoCD namespace
  namespace: argocd
spec:
  # Define generators for Application parameters
  generators:
    # List generator: explicitly define target clusters and any specific parameters
    - list:
        elements:
          # Deploy to the 'staging' cluster
          - cluster: staging-cluster # !! Name of the cluster as defined in ArgoCD !!
            url: https://staging-kube-api.example.com # !! URL of the staging cluster API !!
            environment: staging
          # Deploy to the 'production-eu' cluster
          - cluster: production-eu # !! Name of the cluster as defined in ArgoCD !!
            url: https://prod-eu-kube-api.example.com # !! URL of the prod-eu cluster API !!
            environment: production
          # Deploy to the 'production-us' cluster
          - cluster: production-us # !! Name of the cluster as defined in ArgoCD !!
            url: https://prod-us-kube-api.example.com # !! URL of the prod-us cluster API !!
            environment: production

  # Template for the ArgoCD Application resources to be generated
  template:
    metadata:
      # Application name will be '<app-name>-<cluster-name>' (e.g., hello-world-staging-cluster)
      name: 'hello-world-{{cluster}}'
      # Add labels or annotations if needed
      labels:
        environment: '{{environment}}' # Use generated parameter
    spec:
      # Project grouping
      project: default
      destination:
        # Use the server URL generated by the list generator
        server: '{{url}}'
        # Deploy into a namespace named after the application + environment
        namespace: 'hello-world-{{environment}}'
      # Source of the application manifests (Helm chart in this case)
      source:
        # URL of *this* Git repository
        repoURL: <your-private-github-repo-url> # !! CHANGE THIS !!
        # Path to the Helm chart
        path: preview-env-helm
        # Branch/tag to deploy from (e.g., deploy 'main' branch to all clusters)
        targetRevision: main
        # Helm specific parameters
        helm:
          # You could override values based on the generated 'environment' or 'cluster'
          # For example, use different image tags or replica counts per environment
          valueFiles:
          # Example: load environment-specific values
          #- values-{{environment}}.yaml
          values: |
            # Example: Set replicas based on environment
            replicaCount: 2
            # Example: Override image tag if needed (otherwise uses chart default)
            # image:
            #   tag: stable-v1.2.3
      # Destination cluster and namespace for the application

      # Sync policy for the generated Applications
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - CreateNamespace=true # Ensure the target namespace exists
